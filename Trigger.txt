--Xóa USERNAME và password khi delete employee
DELIMITER //
CREATE TRIGGER DELETE_EMPLOYEE
BEFORE DELETE ON EMPLOYEE
FOR EACH ROW
BEGIN
	DELETE FROM ACC WHERE ACC_USERNAME = OLD.EMPLOYEE_USERNAME;
END; //
DELIMITER ;

--Khi product quantity = 0 thì product trong shopping cart =0 
DELIMITER //

CREATE TRIGGER UPDATE_PRODUCT
BEFORE UPDATE ON PRODUCT
FOR EACH ROW
BEGIN
    IF NEW.PRODUCT_PRICE <> OLD.PRODUCT_PRICE AND EXISTS (SELECT 1 FROM SHOPPING_CART WHERE SC_PRODUCT_ID = NEW.PRODUCT_ID) THEN
        UPDATE SHOPPING_CART SET SC_PRICE = NEW.PRODUCT_PRICE WHERE SC_PRODUCT_ID = NEW.PRODUCT_ID ;
    END IF;
    
    IF NEW.PRODUCT_QUANTITY = 0 AND OLD.PRODUCT_QUANTITY <> 0 AND EXISTS (SELECT 1 FROM SHOPPING_CART WHERE SC_PRODUCT_ID = NEW.PRODUCT_ID) THEN
        UPDATE SHOPPING_CART SET SC_QUANTITY = 0 WHERE SC_PRODUCT_ID = NEW.PRODUCT_ID ;
    END IF;
END //

DELIMITER ;




--Khi +1 Orders thì check voucher để +1 voucher_used và -1 voucher_amount
DELIMITER //
CREATE TRIGGER update_voucher_trigger_amount
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
    IF NEW.ORDERS_VOUCHER_ID IS NOT NULL THEN
        UPDATE VOUCHER
        SET VOUCHER_AMOUNT = VOUCHER_AMOUNT - 1
        WHERE VOUCHER_ID = NEW.ORDERS_VOUCHER_ID;
    END IF;
END//
DELIMITER ;


DELIMITER //
CREATE TRIGGER update_voucher_trigger_used
BEFORE UPDATE ON VOUCHER
FOR EACH ROW
BEGIN
    IF NEW.VOUCHER_AMOUNT = OLD.VOUCHER_AMOUNT-1 THEN
        SET NEW.VOUCHER_USED = OLD.VOUCHER_USED + 1;
    END IF;
END//
DELIMITER ;


--Update Voucher_status
DELIMITER //

CREATE TRIGGER update_voucher_status_trigger
BEFORE UPDATE ON voucher
FOR EACH ROW
BEGIN
    IF NEW.voucher_amount < 0 THEN
        SET NEW.voucher_status = 'NOUSE';
    ELSE
        SET NEW.voucher_status = 'INUSE';
    END IF;
END //

DELIMITER ;


--Khi cập nhật quantity >0 thì status ='AVAILABLE', ngược lại thì 'OUT OF STOCK'
DELIMITER //

CREATE TRIGGER update_product_status
BEFORE UPDATE ON PRODUCT
FOR EACH ROW
BEGIN
    IF NEW.PRODUCT_QUANTITY > 0 THEN
        SET NEW.PRODUCT_STATUS = 'AVAILABLE';
    ELSE
        SET NEW.PRODUCT_STATUS = 'OUT OF STOCK';
    END IF;
END//

DELIMITER ;


DELIMITER //
CREATE TRIGGER update_product_used_insert
BEFORE INSERT ON PRODUCT
FOR EACH ROW
BEGIN
    SET NEW.PRODUCT_SOLD = 0;
END//

DELIMITER ;



--Cập nhật số lượng sản phẩm sau khi order
DELIMITER //

CREATE TRIGGER update_product_quantity
AFTER INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
    UPDATE product
    SET PRODUCT_QUANTITY = PRODUCT_QUANTITY - NEW.OI_QUANTITY
    WHERE PRODUCT_ID = NEW.OI_PRODUCT_ID;
END //

DELIMITER ;



--Tính OI_PRICE khi insert Order_Items
DELIMITER //

CREATE TRIGGER calculate_oi_price
BEFORE INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
    SET NEW.OI_PRICE = NEW.OI_QUANTITY * (
        SELECT PRODUCT_PRICE FROM PRODUCT WHERE PRODUCT_ID = NEW.OI_PRODUCT_ID
    );
END //

DELIMITER ;

DELIMITER //

CREATE TRIGGER calculate_oi_price_update
BEFORE UPDATE ON ORDER_ITEMS
FOR EACH ROW
BEGIN
    SET NEW.OI_PRICE = NEW.OI_QUANTITY * (
        SELECT PRODUCT_PRICE FROM PRODUCT WHERE PRODUCT_ID = NEW.OI_PRODUCT_ID
    );
END //

DELIMITER ;


--Tính tổng tiền orders (có voucher)
DELIMITER //

CREATE TRIGGER update_orders_price_trigger
AFTER INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
    DECLARE order_price1 DECIMAL(10,2);
    DECLARE voucher_type1 VARCHAR(45);
    DECLARE voucher_value1 DOUBLE;
    
    SELECT VOUCHER_TYPE, VOUCHER_VALUE
    INTO voucher_type1, voucher_value1
    FROM voucher
    WHERE VOUCHER_ID = (SELECT ORDERS_VOUCHER_ID FROM ORDERS WHERE ORDERS_ID = NEW.OI_ORDERS_ID);
    
    SET order_price1 = (
        SELECT CASE
            WHEN voucher_type1 = 'DIVIDE'
                THEN ROUND((SELECT SUM(OI_PRICE) FROM ORDER_ITEMS WHERE OI_ORDERS_ID = NEW.OI_ORDERS_ID) / voucher_value1)
            WHEN voucher_type1 = 'SUBTRACT'
                THEN ROUND((SELECT SUM(OI_PRICE) FROM ORDER_ITEMS WHERE OI_ORDERS_ID = NEW.OI_ORDERS_ID) - voucher_value1)
            ELSE (SELECT SUM(OI_PRICE) FROM ORDER_ITEMS WHERE OI_ORDERS_ID = NEW.OI_ORDERS_ID)  
        END
    );
    
    UPDATE ORDERS
    SET ORDERS_PRICE = order_price1
    WHERE ORDERS_ID = NEW.OI_ORDERS_ID;
END //

DELIMITER ;






--trigger cập nhật giá sc_price của product khi product_price thay đổi
DELIMITER //

CREATE TRIGGER update_shopping_cart_price_trigger
AFTER UPDATE ON PRODUCT
FOR EACH ROW
BEGIN
    UPDATE SHOPPING_CART
    SET SC_PRICE = NEW.PRODUCT_PRICE * SC_AMOUNT
    WHERE SC_PRODUCT_ID = NEW.PRODUCT_ID;
END //

DELIMITER ;

--Tính SC_PRICE sau khi thêm product vào giỏ hàng
DELIMITER //

CREATE TRIGGER calculate_sc_price
BEFORE INSERT ON SHOPPING_CART
FOR EACH ROW
BEGIN
    SET NEW.SC_PRICE = NEW.SC_AMOUNT * (
        SELECT PRODUCT_PRICE FROM PRODUCT WHERE PRODUCT_ID = NEW.SC_PRODUCT_ID
    );
END //

DELIMITER ;

DELIMITER //
CREATE TRIGGER calculate_sc_price_update
BEFORE UPDATE ON SHOPPING_CART
FOR EACH ROW
BEGIN
    SET NEW.SC_PRICE = NEW.SC_AMOUNT * (
        SELECT PRODUCT_PRICE FROM PRODUCT WHERE PRODUCT_ID = NEW.SC_PRODUCT_ID
    );
END //

DELIMITER ;

--Cập nhật ngày hiện tại vào orders_date (pass)
DELIMITER //

CREATE TRIGGER update_orders_date_trigger
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
    SET NEW.ORDERS_DATE = CURDATE();
END //

DELIMITER ;

--Cập nhật ngày hiện tại vào receipt_date (pass)
DELIMITER //

CREATE TRIGGER update_receipt_date_trigger 
BEFORE INSERT ON PRODUCT_RECEIPT
FOR EACH ROW
BEGIN
    SET NEW.RECEIPT_DATE = CURDATE();
END //

DELIMITER ;

--tăng quantity product khi nhập hàng (pass)
DELIMITER //

CREATE TRIGGER increase_product_quantity_trigger
AFTER INSERT ON PRODUCT_RECEIPT
FOR EACH ROW
BEGIN
    UPDATE PRODUCT
    SET PRODUCT_QUANTITY = PRODUCT_QUANTITY + NEW.RECEIPT_QUANTITY
    WHERE PRODUCT_ID = NEW.PRODUCT_ID;
END //

DELIMITER ;

--Trigger update size quantity
DELIMITER //

CREATE TRIGGER update_size_quantity
BEFORE INSERT ON ORDER_ITEMS
FOR EACH ROW
BEGIN
    DECLARE size_quantity1 INT;
    SELECT SIZE_QUANTITY INTO size_quantity1
    FROM SIZE
    WHERE SIZE_PRODUCT_ID = NEW.OI_PRODUCT_ID AND SIZE_NAME = NEW.OI_SIZE;
    
    IF size_quantity1 IS NOT NULL THEN
        SET NEW.OI_QUANTITY = LEAST(size_quantity1, NEW.OI_QUANTITY);
        UPDATE SIZE
        SET SIZE_QUANTITY = SIZE_QUANTITY - NEW.OI_QUANTITY
        WHERE SIZE_PRODUCT_ID = NEW.OI_PRODUCT_ID AND SIZE_NAME = NEW.OI_SIZE;
    END IF;
END //

DELIMITER ;



DELIMITER //

CREATE TRIGGER trg_orders_canceled
AFTER UPDATE ON ORDERS
FOR EACH ROW
BEGIN
    IF NEW.ORDERS_STATUS = 'CANCELED' AND OLD.ORDERS_STATUS <> 'CANCELED' THEN
        -- Phục hồi OI_QUANTITY
        UPDATE ORDER_ITEMS
        SET OI_QUANTITY = OI_QUANTITY + (
            SELECT OI_QUANTITY
            FROM ORDER_ITEMS
            WHERE OI_ORDERS_ID = NEW.ORDERS_ID
        )
        WHERE OI_ORDERS_ID = NEW.ORDERS_ID;

        -- Phục hồi PRODUCT_QUANTITY
        UPDATE PRODUCT
        SET PRODUCT_QUANTITY = PRODUCT_QUANTITY + (
            SELECT OI_QUANTITY
            FROM ORDER_ITEMS
            WHERE OI_ORDERS_ID = NEW.ORDERS_ID
              AND OI_PRODUCT_ID = PRODUCT.PRODUCT_ID
        )
        WHERE EXISTS (
            SELECT *
            FROM ORDER_ITEMS
            WHERE OI_ORDERS_ID = NEW.ORDERS_ID
              AND OI_PRODUCT_ID = PRODUCT.PRODUCT_ID
        );
    END IF;
END //

DELIMITER ;




-- Tạo trigger để tự động tăng giá trị cho MANAGER_ID
DELIMITER //
CREATE TRIGGER tr_insert_manager
BEFORE INSERT ON MANAGER
FOR EACH ROW
BEGIN
    SET NEW.MANAGER_ID = CONCAT('M', LPAD((SELECT IFNULL(MAX(CAST(SUBSTRING(MANAGER_ID, 2) AS UNSIGNED)), 0) + 1 FROM MANAGER), 2, '0'));
END //
DELIMITER ;

-- Tạo trigger để tự động tăng giá trị cho EMPLOYEE_ID
DELIMITER //
CREATE TRIGGER tr_insert_employee
BEFORE INSERT ON EMPLOYEE
FOR EACH ROW
BEGIN
    SET NEW.EMPLOYEE_ID = CONCAT('E', LPAD((SELECT IFNULL(MAX(CAST(SUBSTRING(EMPLOYEE_ID, 2) AS UNSIGNED)), 0) + 1 FROM EMPLOYEE), 2, '0'));
END //
DELIMITER ;

-- Tạo trigger để tự động tăng giá trị cho CUSTOMER_ID
DELIMITER //
CREATE TRIGGER tr_insert_customer
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
BEGIN
    SET NEW.CUSTOMER_ID = CONCAT('C', LPAD((SELECT IFNULL(MAX(CAST(SUBSTRING(CUSTOMER_ID, 2) AS UNSIGNED)), 0) + 1 FROM CUSTOMER), 2, '0'));
END //
DELIMITER ;

-- Tạo trigger để tự động tăng giá trị cho VOUCHER_ID
DELIMITER //
CREATE TRIGGER tr_insert_voucher
BEFORE INSERT ON VOUCHER
FOR EACH ROW
BEGIN
    SET NEW.VOUCHER_ID = CONCAT('V', LPAD((SELECT IFNULL(MAX(CAST(SUBSTRING(VOUCHER_ID, 2) AS UNSIGNED)), 0) + 1 FROM VOUCHER), 2, '0'));
END //
DELIMITER ;

-- Tạo trigger để tự động tăng giá trị cho ORDERS_ID
DELIMITER //
CREATE TRIGGER tr_insert_orders
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
    SET NEW.ORDERS_ID = CONCAT('O', LPAD((SELECT IFNULL(MAX(CAST(SUBSTRING(ORDERS_ID, 2) AS UNSIGNED)), 0) + 1 FROM ORDERS), 2, '0'));
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER tr_insert_product_receipt
BEFORE INSERT ON PRODUCT_RECEIPT
FOR EACH ROW
BEGIN
    SET NEW.RECEIPT_ID  = CONCAT('R', LPAD((SELECT IFNULL(MAX(CAST(SUBSTRING(RECEIPT_ID, 2) AS UNSIGNED)), 0) + 1 FROM PRODUCT_RECEIPT), 2, '0'));
END //
DELIMITER ;



DELIMITER //
CREATE TRIGGER before_insert_size
BEFORE INSERT ON SIZE FOR EACH ROW
BEGIN
    DECLARE last_size_id INT;
    SET last_size_id = (
        SELECT CAST(SUBSTRING(MAX(SIZE_ID), 2) AS UNSIGNED)
        FROM SIZE
        WHERE SIZE_ID LIKE 'S%'
    );
    IF last_size_id IS NULL THEN
        SET new.SIZE_ID = 'S100';
    ELSE
        SET new.SIZE_ID = CONCAT('S', last_size_id + 1);
    END IF;
END //
DELIMITER ;
